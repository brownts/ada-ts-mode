Point-Char: |

Code: (lambda () (defun-transform "ABC.DEF"))

Name: generic_package_declaration / formal_concrete_subprogram_declaration / procedure

=-=
generic
   with procedure DEF|;
package ABC is
end ABC;
=-=-=

Name: generic_package_declaration / formal_concrete_subprogram_declaration / function (identifier)

=-=
generic
   with function DEF return Integer|;
package ABC is
end ABC;
=-=-=

Code: (lambda () (defun-transform "ABC.\"+\""))

Name: generic_package_declaration / formal_concrete_subprogram_declaration / function (string_literal)

=-=
generic
   with function "+" (Left, Right : Integer) return Integer|;
package ABC is
end ABC;
=-=-=

Code: (lambda () (defun-transform "ABC.DEF"))

Name: generic_subprogram_declaration / procedure / formal_concrete_subprogram_declaration / procedure

=-=
generic
   with procedure DEF|;
procedure ABC;
=-=-=

Name: generic_subprogram_declaration / procedure / formal_concrete_subprogram_declaration / function (identifier)

=-=
generic
   with function DEF return Integer|;
procedure ABC;
=-=-=

Code: (lambda () (defun-transform "ABC.\"+\""))

Name: generic_subprogram_declaration / procedure / formal_concrete_subprogram_declaration / function (string_literal)

=-=
generic
   with function "+" (Left, Right : Integer) return Integer|;
procedure ABC;
=-=-=

Code: (lambda () (defun-transform "ABC.DEF"))

Name: generic_subprogram_declaration / function / formal_concrete_subprogram_declaration / procedure

=-=
generic
   with procedure DEF|;
function ABC return Integer;
=-=-=

Name: generic_subprogram_declaration / function / formal_concrete_subprogram_declaration / function (identifier)

=-=
generic
   with function DEF return Integer|;
function ABC return Integer;
=-=-=

Code: (lambda () (defun-transform "ABC.\"+\""))

Name: generic_subprogram_declaration / function / formal_concrete_subprogram_declaration / function (string_literal)

=-=
generic
   with function "+" (Left, Right : Integer) return Integer|;
function ABC return Integer;
=-=-=
