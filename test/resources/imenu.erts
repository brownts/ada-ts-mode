Code: (lambda () (imenu-transform nil))

Name: Empty File

=-=
=-=-=

Code: (lambda () (imenu-transform '(("Package" ("Test")))))

Name: package_declaration (identifier)

=-=
package Test is
end Test;
=-=-=

Code: (lambda () (imenu-transform '(("Package" ("Test.ABC")))))

Name: package_declaration (selected_component)

=-=
package Test.ABC is
end Test.ABC;
=-=-=

Code: (lambda () (imenu-transform '(("Subprogram" ("ABC")))))

Name: subprogram_declaration (identifier) / procedure

=-=
procedure ABC;
=-=-=

Name: subprogram_declaration (selected_component) / procedure

Code: (lambda () (imenu-transform '(("Subprogram" ("Test.ABC")))))

=-=
procedure Test.ABC;
=-=-=

Code: (lambda () (imenu-transform '(("Subprogram" ("ABC")))))

Name: subprogram_declaration (identifier) / function

=-=
function ABC return Integer;
=-=-=

Code: (lambda () (imenu-transform '(("Subprogram" ("\"+\"")))))

Name: subprogram_declaration (string_literal) / function

=-=
function "+" (Left, Right : Integer) return Integer;
=-=-=

Code: (lambda () (imenu-transform '(("Subprogram" ("Test.ABC")))))

Name: subprogram_declaration (selected_component) / function

=-=
function Test.ABC return Integer;
=-=-=

Name: Various

Code: (lambda () (imenu-transform
                  '(("Package"    ("Test" ("XYZ")
                                          ("XYZ" ("UVW_1")
                                                 ("UVW_2")
                                                 ("UVW_3")
                                                 ("UVW_4")
                                                 ("UVW_4" ("DEF_3"))
                                                 ("ABC_4" ("DEF_9")))))
                    ("Subprogram" ("Test" ("XYZ" ("UVW_4" ("DEF_0")
                                                          ("DEF_1")
                                                          ("DEF_2"))
                                                 ("\"+\"")
                                                 ("ABC_1")
                                                 ("ABC_2")
                                                 ("ABC_3")
                                                 ("ABC_4")
                                                 ("ABC_4" ("DEF_6")
                                                          ("DEF_7")
                                                          ("DEF_8"))))))))

=-=
separate (Test)
package body XYZ is

   package UVW_1 is
   end UVW_1;

   package body UVW_2 is
   end UVW_2;

   package body UVW_3 is separate;

   generic
      with procedure DEF_0;
      with function DEF_1 return Integer;
      with function DEF_2 return Integer is abstract;
      with package DEF_3 is new GHI;
   package UVW_4 is
   end UVW_4;

   function "+" (Left, Right : Integer) return Integer is (Left + Right);
   function ABC_1 return Integer is separate;
   procedure ABC_2;
   procedure ABC_3 is separate;

   generic
      with procedure DEF_6;
      with function DEF_7 return Integer;
      with function DEF_8 return Integer is abstract;
      with package DEF_9 is new GHI;
   procedure ABC_4;

end XYZ;
=-=-=

Name: with_clause

Code: (lambda () (imenu-transform
                  '(("With Clause" ("Ada")
                                   ("Ada.Text_IO")
                                   ("Text_IO")
                                   ("ABC")
                                   ("DEF")
                                   ("XYZ.ABC")))))

=-=
with Ada, Ada.Text_IO, Text_IO;
with ABC;
with DEF;
with XYZ.ABC;
=-=-=

Name: Tasks, Protected Units and Types

Code: (lambda () (imenu-transform
                  '(("Package" ("Test")
                               ("Test"))
                    ("Protected" ("Test" ("Protected_Type_Declaration")
                                         ("Single_Protected_Declaration")
                                         ("Protected_Body")
                                         ("Protected_Body_Stub")))
                    ("Task" ("Test" ("Task_Type_Declaration")
                                    ("Single_Task_Declaration")
                                    ("Task_Body")
                                    ("Task_Body_Stub")))
                    ("Type Declaration" ("Test" ("Formal_Complete_Type_Declaration")
                                                ("Formal_Incomplete_Type_Declaration"))
                                        ("Test" ("Full_Type_Declaration")
                                                ("Subtype_Declaration")
                                                ("Incomplete_Type_Declaration")
                                                ("Private_Type_Declaration")
                                                ("Private_Extension_Declaration")
                                                ("Task_Type_Declaration")
                                                ("Protected_Type_Declaration"))))))

=-=
generic
   type Formal_Complete_Type_Declaration is private;
   type Formal_Incomplete_Type_Declaration;
package Test is
end Test;

package body Test is

   type Full_Type_Declaration is new Integer range 0 .. 255;

   subtype Subtype_Declaration is Full_Type_Declaration;

   type Incomplete_Type_Declaration;

   type Private_Type_Declaration is private;

   type Private_Extension_Declaration is new Private_Type_Declaration with private;

   task type Task_Type_Declaration;

   protected type Protected_Type_Declaration is
   end Protected_Type_Declaration;

   task Single_Task_Declaration;

   protected Single_Protected_Declaration is
   end Single_Protected_Declaration;

   task body Task_Body is
   begin
      null;
   end Task_Body;

   protected body Protected_Body is
   end Protected_Body;

   task body Task_Body_Stub is separate;

   protected body Protected_Body_Stub is separate;
end Test;
=-=-=
